// Пример 1

// Исходная версия кода

// Цикломатическая сложность - 10

 private List<PlanCalculable> reflectPlanLimit(Plan plan, TypeOfPlanLimit typeOfPlanLimit, Map<Boolean, Set<Long>> limits, List<PlanCalculable> planCalculables) {

        List<PlanCalculable> result = new ArrayList<>();

        int limitRelationSymbol = 0;
        if (typeOfPlanLimit.getObjectLimit().contains(">") || typeOfPlanLimit.getObjectLimit().contains("<"))
            limitRelationSymbol = typeOfPlanLimit.getObjectLimit().contains(">") ? 1 : 2;

        String[] limitTargetFields = typeOfPlanLimit.getFieldLimit().split(Pattern.quote("."));

        if (limits.get(false).isEmpty()) {
            result = planCalculables;
        } else {
            Set<Float> limitedObjectId = getLimitObjectId(plan, typeOfPlanLimit, limits.get(false), limitRelationSymbol, limitTargetFields[limitTargetFields.length - 1]);
            for (PlanCalculable pc : planCalculables) {
                Set<Float> pcValue = getValueFromPlanCalculableObject(false, Collections.singletonList(pc), typeOfPlanLimit.getFieldLimit());
                if (!pcValue.isEmpty() && limitedObjectId.containsAll(pcValue))
                    result.add(pc);
            }
        }
        if (!limits.get(true).isEmpty()) {
            Set<Float> limitedObjectId = getLimitObjectId(plan, typeOfPlanLimit, limits.get(true), limitRelationSymbol, limitTargetFields[limitTargetFields.length - 1]);
            Iterator<PlanCalculable> iterator = result.iterator();
            while ((iterator.hasNext())) {
                PlanCalculable pc = iterator.next();
                if (limitedObjectId.containsAll(getValueFromPlanCalculableObject(false, Arrays.asList(pc), typeOfPlanLimit.getFieldLimit())))
                    iterator.remove();
            }
        }
        return result;
    }


// Конечная версия кода

// Цикломатическая сложность - 5
// Использованные приемы избавления от сложности:
// - Избавился от стандартных циклов for и while, заменив где нужно на более эффективные forEach и removeIf
// - Избавился от вложенных if и else, теперь любой if всегда приводит к выходу из метода
// - Избавился от циклов внутри условий
// - Сократил код с
//        (if (условие) return true; else return false)
//                  до
//        (return условие)

private List<PlanCalculable> reflectPlanLimit(Plan plan, TypeOfPlanLimit typeOfPlanLimit, Map<Boolean, Set<Long>> limits, List<PlanCalculable> planCalculables) {

        if (limits.isEmpty()) return planCalculables;

        int limitRelationSymbol = typeOfPlanLimit.getObjectLimit().contains(">") ? 1 : typeOfPlanLimit.getObjectLimit().contains("<") ? 2 : 0;
        String[] limitTargetFields = typeOfPlanLimit.getFieldLimit().split(Pattern.quote("."));

        if (limits.get(false).isEmpty()) {
            List<PlanCalculable> result = planCalculables;
            Set<Float> limitedObjectId = getLimitObjectId(plan, typeOfPlanLimit, limits.get(true), limitRelationSymbol, limitTargetFields[limitTargetFields.length - 1]);
            result.removeIf(planCalculable -> limitedObjectId.containsAll(getValueFromPlanCalculableObject(false, Arrays.asList(pc), typeOfPlanLimit.getFieldLimit())))
            return result;
        }

        Set<Float> limitedObjectId = getLimitObjectId(plan, typeOfPlanLimit, limits.get(false), limitRelationSymbol, limitTargetFields[limitTargetFields.length - 1]);
        List<PlanCalculable> planCalculablesForResult = planCalculables;
        planCalculablesForResult.removeIf(planCalculable -> {
            Set<Float> pcValue = getValueFromPlanCalculableObject(false, Collections.singletonList(pc), typeOfPlanLimit.getFieldLimit());
            return pcValue.isEmpty() || !limitedObjectId.containsAll(pcValue);
        });
        Set<Float> limitedObjectId = getLimitObjectId(plan, typeOfPlanLimit, limits.get(true), limitRelationSymbol, limitTargetFields[limitTargetFields.length - 1]);
        planCalculablesForResult.removeIf(planCalculable -> limitedObjectId.containsAll(getValueFromPlanCalculableObject(false, Arrays.asList(pc), typeOfPlanLimit.getFieldLimit())))
        return planCalculablesForResult;
}