Резюме по теме

Фаззинг позволяет выявить баги в программе, которые люди не всегда способны предугадать.
Во время фаззинга происходит генерация тестовых случаев с различными данными, в течение заданного времени,
либо пока не сработает какое-либо условие.

Виды фаззинга:
1.Blackbox (самый примитивный и поверхностный, для поиска типичных багов)
2.Whitebox (самый тяжелой, использует SMT-solvers)
3.Greybox (средний по сложности, получает информацию о выводе, падении и ходе исполнения программы)


Отчет по заданию:
1. Долго выбирал подходящий фаззер) В итоге остановился на Jazzer по причине того, что его легко подключить и использовать
   (можно просто подключить как зависимость и сразу пользоваться в unit-тестах как Junit5), а также потому, что мои проекты
   написаны на Java и Kotlin, для которых Jazzer подходит лучше перечисленных в статье.
2. Больших трудностей с использованием не возникло, кроме того, что долго не мог понять как читать файлы с крашами и как
   вообще понять, в каком конкретно кейсе произошел сбой.
3. Тот проект, на котором тестировал, написан на Котлин, объем приблизительно 5000 строк кода
4. Так как большая часть кода состоит из ui-слоя и получения и отправки данных, то на слой непосредственно
   бизнес-логики пришлось около 400 строк кода, в них было выявлено 5 ошибок, преимущественно в методах расчета
   каких-то показателей, либо поиска и фильтрации данных.

Мои выводы по заданию:
1. Убедился, что я могу предсказать далеко не все возможные сценарии исполнения программы.
2. Постараюсь поглубже разобраться с тем, как применять фаззинг непосредственно в специфике андроид-разработки,
   возможно есть более подходящие варианты конкретно для моей области